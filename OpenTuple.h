// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/lustre/fs22/group/atlas/haweber/SchuelerProjekte/ATLASOpenData/13TeV/2lep/MC/mc_361107.Zmumu.2lep.root", "mini", "OpenTuple", "tpl", "opentuple")

#ifndef OpenTuple_H
#define OpenTuple_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class OpenTuple {
 private: 
 protected: 
  unsigned int index;
  int      runNumber_;
  TBranch *runNumber_branch;
  bool     runNumber_isLoaded;
  int      eventNumber_;
  TBranch *eventNumber_branch;
  bool     eventNumber_isLoaded;
  int      channelNumber_;
  TBranch *channelNumber_branch;
  bool     channelNumber_isLoaded;
  float    mcWeight_;
  TBranch *mcWeight_branch;
  bool     mcWeight_isLoaded;
  float    scaleFactor_PILEUP_;
  TBranch *scaleFactor_PILEUP_branch;
  bool     scaleFactor_PILEUP_isLoaded;
  float    scaleFactor_ELE_;
  TBranch *scaleFactor_ELE_branch;
  bool     scaleFactor_ELE_isLoaded;
  float    scaleFactor_MUON_;
  TBranch *scaleFactor_MUON_branch;
  bool     scaleFactor_MUON_isLoaded;
  float    scaleFactor_PHOTON_;
  TBranch *scaleFactor_PHOTON_branch;
  bool     scaleFactor_PHOTON_isLoaded;
  float    scaleFactor_TAU_;
  TBranch *scaleFactor_TAU_branch;
  bool     scaleFactor_TAU_isLoaded;
  float    scaleFactor_BTAG_;
  TBranch *scaleFactor_BTAG_branch;
  bool     scaleFactor_BTAG_isLoaded;
  float    scaleFactor_LepTRIGGER_;
  TBranch *scaleFactor_LepTRIGGER_branch;
  bool     scaleFactor_LepTRIGGER_isLoaded;
  float    scaleFactor_PhotonTRIGGER_;
  TBranch *scaleFactor_PhotonTRIGGER_branch;
  bool     scaleFactor_PhotonTRIGGER_isLoaded;
  bool     trigE_;
  TBranch *trigE_branch;
  bool     trigE_isLoaded;
  bool     trigM_;
  TBranch *trigM_branch;
  bool     trigM_isLoaded;
  bool     trigP_;
  TBranch *trigP_branch;
  bool     trigP_isLoaded;
  unsigned int lep_n_;
  TBranch *lep_n_branch;
  bool     lep_n_isLoaded;
  vector<bool> *lep_truthMatched_;
  TBranch *lep_truthMatched_branch;
  bool     lep_truthMatched_isLoaded;
  vector<bool> *lep_trigMatched_;
  TBranch *lep_trigMatched_branch;
  bool     lep_trigMatched_isLoaded;
  vector<float> *lep_pt_;
  TBranch *lep_pt_branch;
  bool     lep_pt_isLoaded;
  vector<float> *lep_eta_;
  TBranch *lep_eta_branch;
  bool     lep_eta_isLoaded;
  vector<float> *lep_phi_;
  TBranch *lep_phi_branch;
  bool     lep_phi_isLoaded;
  vector<float> *lep_E_;
  TBranch *lep_E_branch;
  bool     lep_E_isLoaded;
  vector<float> *lep_z0_;
  TBranch *lep_z0_branch;
  bool     lep_z0_isLoaded;
  vector<int> *lep_charge_;
  TBranch *lep_charge_branch;
  bool     lep_charge_isLoaded;
  vector<unsigned int> *lep_type_;
  TBranch *lep_type_branch;
  bool     lep_type_isLoaded;
  vector<bool> *lep_isTightID_;
  TBranch *lep_isTightID_branch;
  bool     lep_isTightID_isLoaded;
  vector<float> *lep_ptcone30_;
  TBranch *lep_ptcone30_branch;
  bool     lep_ptcone30_isLoaded;
  vector<float> *lep_etcone20_;
  TBranch *lep_etcone20_branch;
  bool     lep_etcone20_isLoaded;
  vector<float> *lep_trackd0pvunbiased_;
  TBranch *lep_trackd0pvunbiased_branch;
  bool     lep_trackd0pvunbiased_isLoaded;
  vector<float> *lep_tracksigd0pvunbiased_;
  TBranch *lep_tracksigd0pvunbiased_branch;
  bool     lep_tracksigd0pvunbiased_isLoaded;
  unsigned int jet_n_;
  TBranch *jet_n_branch;
  bool     jet_n_isLoaded;
  vector<float> *jet_pt_;
  TBranch *jet_pt_branch;
  bool     jet_pt_isLoaded;
  vector<float> *jet_eta_;
  TBranch *jet_eta_branch;
  bool     jet_eta_isLoaded;
  vector<float> *jet_phi_;
  TBranch *jet_phi_branch;
  bool     jet_phi_isLoaded;
  vector<float> *jet_E_;
  TBranch *jet_E_branch;
  bool     jet_E_isLoaded;
  vector<float> *jet_jvt_;
  TBranch *jet_jvt_branch;
  bool     jet_jvt_isLoaded;
  vector<int> *jet_trueflav_;
  TBranch *jet_trueflav_branch;
  bool     jet_trueflav_isLoaded;
  vector<bool> *jet_truthMatched_;
  TBranch *jet_truthMatched_branch;
  bool     jet_truthMatched_isLoaded;
  vector<float> *jet_MV2c10_;
  TBranch *jet_MV2c10_branch;
  bool     jet_MV2c10_isLoaded;
  unsigned int photon_n_;
  TBranch *photon_n_branch;
  bool     photon_n_isLoaded;
  vector<bool> *photon_truthMatched_;
  TBranch *photon_truthMatched_branch;
  bool     photon_truthMatched_isLoaded;
  vector<bool> *photon_trigMatched_;
  TBranch *photon_trigMatched_branch;
  bool     photon_trigMatched_isLoaded;
  vector<float> *photon_pt_;
  TBranch *photon_pt_branch;
  bool     photon_pt_isLoaded;
  vector<float> *photon_eta_;
  TBranch *photon_eta_branch;
  bool     photon_eta_isLoaded;
  vector<float> *photon_phi_;
  TBranch *photon_phi_branch;
  bool     photon_phi_isLoaded;
  vector<float> *photon_E_;
  TBranch *photon_E_branch;
  bool     photon_E_isLoaded;
  vector<bool> *photon_isTightID_;
  TBranch *photon_isTightID_branch;
  bool     photon_isTightID_isLoaded;
  vector<float> *photon_ptcone30_;
  TBranch *photon_ptcone30_branch;
  bool     photon_ptcone30_isLoaded;
  vector<float> *photon_etcone20_;
  TBranch *photon_etcone20_branch;
  bool     photon_etcone20_isLoaded;
  vector<int> *photon_convType_;
  TBranch *photon_convType_branch;
  bool     photon_convType_isLoaded;
  unsigned int tau_n_;
  TBranch *tau_n_branch;
  bool     tau_n_isLoaded;
  vector<float> *tau_pt_;
  TBranch *tau_pt_branch;
  bool     tau_pt_isLoaded;
  vector<float> *tau_eta_;
  TBranch *tau_eta_branch;
  bool     tau_eta_isLoaded;
  vector<float> *tau_phi_;
  TBranch *tau_phi_branch;
  bool     tau_phi_isLoaded;
  vector<float> *tau_E_;
  TBranch *tau_E_branch;
  bool     tau_E_isLoaded;
  vector<bool> *tau_isTightID_;
  TBranch *tau_isTightID_branch;
  bool     tau_isTightID_isLoaded;
  vector<bool> *tau_truthMatched_;
  TBranch *tau_truthMatched_branch;
  bool     tau_truthMatched_isLoaded;
  vector<bool> *tau_trigMatched_;
  TBranch *tau_trigMatched_branch;
  bool     tau_trigMatched_isLoaded;
  vector<int> *tau_nTracks_;
  TBranch *tau_nTracks_branch;
  bool     tau_nTracks_isLoaded;
  vector<float> *tau_BDTid_;
  TBranch *tau_BDTid_branch;
  bool     tau_BDTid_isLoaded;
  float    ditau_m_;
  TBranch *ditau_m_branch;
  bool     ditau_m_isLoaded;
  vector<float> *lep_pt_syst_;
  TBranch *lep_pt_syst_branch;
  bool     lep_pt_syst_isLoaded;
  float    met_et_syst_;
  TBranch *met_et_syst_branch;
  bool     met_et_syst_isLoaded;
  vector<float> *jet_pt_syst_;
  TBranch *jet_pt_syst_branch;
  bool     jet_pt_syst_isLoaded;
  vector<float> *photon_pt_syst_;
  TBranch *photon_pt_syst_branch;
  bool     photon_pt_syst_isLoaded;
  vector<float> *tau_pt_syst_;
  TBranch *tau_pt_syst_branch;
  bool     tau_pt_syst_isLoaded;
  float    XSection_;
  TBranch *XSection_branch;
  bool     XSection_isLoaded;
  float    SumWeights_;
  TBranch *SumWeights_branch;
  bool     SumWeights_isLoaded;
  unsigned int largeRjet_n_;
  TBranch *largeRjet_n_branch;
  bool     largeRjet_n_isLoaded;
  vector<float> *largeRjet_pt_;
  TBranch *largeRjet_pt_branch;
  bool     largeRjet_pt_isLoaded;
  vector<float> *largeRjet_eta_;
  TBranch *largeRjet_eta_branch;
  bool     largeRjet_eta_isLoaded;
  vector<float> *largeRjet_phi_;
  TBranch *largeRjet_phi_branch;
  bool     largeRjet_phi_isLoaded;
  vector<float> *largeRjet_E_;
  TBranch *largeRjet_E_branch;
  bool     largeRjet_E_isLoaded;
  vector<float> *largeRjet_m_;
  TBranch *largeRjet_m_branch;
  bool     largeRjet_m_isLoaded;
  vector<float> *largeRjet_truthMatched_;
  TBranch *largeRjet_truthMatched_branch;
  bool     largeRjet_truthMatched_isLoaded;
  vector<float> *largeRjet_D2_;
  TBranch *largeRjet_D2_branch;
  bool     largeRjet_D2_isLoaded;
  vector<float> *largeRjet_tau32_;
  TBranch *largeRjet_tau32_branch;
  bool     largeRjet_tau32_isLoaded;
  vector<float> *largeRjet_pt_syst_;
  TBranch *largeRjet_pt_syst_branch;
  bool     largeRjet_pt_syst_isLoaded;
  vector<int> *tau_charge_;
  TBranch *tau_charge_branch;
  bool     tau_charge_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &runNumber();
  const int &eventNumber();
  const int &channelNumber();
  const float &mcWeight();
  const float &scaleFactor_PILEUP();
  const float &scaleFactor_ELE();
  const float &scaleFactor_MUON();
  const float &scaleFactor_PHOTON();
  const float &scaleFactor_TAU();
  const float &scaleFactor_BTAG();
  const float &scaleFactor_LepTRIGGER();
  const float &scaleFactor_PhotonTRIGGER();
  const bool &trigE();
  const bool &trigM();
  const bool &trigP();
  const unsigned int &lep_n();
  const vector<bool> &lep_truthMatched();
  const vector<bool> &lep_trigMatched();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_phi();
  const vector<float> &lep_E();
  const vector<float> &lep_z0();
  const vector<int> &lep_charge();
  const vector<unsigned int> &lep_type();
  const vector<bool> &lep_isTightID();
  const vector<float> &lep_ptcone30();
  const vector<float> &lep_etcone20();
  const vector<float> &lep_trackd0pvunbiased();
  const vector<float> &lep_tracksigd0pvunbiased();
  const unsigned int &jet_n();
  const vector<float> &jet_pt();
  const vector<float> &jet_eta();
  const vector<float> &jet_phi();
  const vector<float> &jet_E();
  const vector<float> &jet_jvt();
  const vector<int> &jet_trueflav();
  const vector<bool> &jet_truthMatched();
  const vector<float> &jet_MV2c10();
  const unsigned int &photon_n();
  const vector<bool> &photon_truthMatched();
  const vector<bool> &photon_trigMatched();
  const vector<float> &photon_pt();
  const vector<float> &photon_eta();
  const vector<float> &photon_phi();
  const vector<float> &photon_E();
  const vector<bool> &photon_isTightID();
  const vector<float> &photon_ptcone30();
  const vector<float> &photon_etcone20();
  const vector<int> &photon_convType();
  const unsigned int &tau_n();
  const vector<float> &tau_pt();
  const vector<float> &tau_eta();
  const vector<float> &tau_phi();
  const vector<float> &tau_E();
  const vector<bool> &tau_isTightID();
  const vector<bool> &tau_truthMatched();
  const vector<bool> &tau_trigMatched();
  const vector<int> &tau_nTracks();
  const vector<float> &tau_BDTid();
  const float &ditau_m();
  const vector<float> &lep_pt_syst();
  const float &met_et_syst();
  const vector<float> &jet_pt_syst();
  const vector<float> &photon_pt_syst();
  const vector<float> &tau_pt_syst();
  const float &XSection();
  const float &SumWeights();
  const unsigned int &largeRjet_n();
  const vector<float> &largeRjet_pt();
  const vector<float> &largeRjet_eta();
  const vector<float> &largeRjet_phi();
  const vector<float> &largeRjet_E();
  const vector<float> &largeRjet_m();
  const vector<float> &largeRjet_truthMatched();
  const vector<float> &largeRjet_D2();
  const vector<float> &largeRjet_tau32();
  const vector<float> &largeRjet_pt_syst();
  const vector<int> &tau_charge();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern OpenTuple opentuple;
#endif

namespace tpl {
  const int &runNumber();
  const int &eventNumber();
  const int &channelNumber();
  const float &mcWeight();
  const float &scaleFactor_PILEUP();
  const float &scaleFactor_ELE();
  const float &scaleFactor_MUON();
  const float &scaleFactor_PHOTON();
  const float &scaleFactor_TAU();
  const float &scaleFactor_BTAG();
  const float &scaleFactor_LepTRIGGER();
  const float &scaleFactor_PhotonTRIGGER();
  const bool &trigE();
  const bool &trigM();
  const bool &trigP();
  const unsigned int &lep_n();
  const vector<bool> &lep_truthMatched();
  const vector<bool> &lep_trigMatched();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_phi();
  const vector<float> &lep_E();
  const vector<float> &lep_z0();
  const vector<int> &lep_charge();
  const vector<unsigned int> &lep_type();
  const vector<bool> &lep_isTightID();
  const vector<float> &lep_ptcone30();
  const vector<float> &lep_etcone20();
  const vector<float> &lep_trackd0pvunbiased();
  const vector<float> &lep_tracksigd0pvunbiased();
  const unsigned int &jet_n();
  const vector<float> &jet_pt();
  const vector<float> &jet_eta();
  const vector<float> &jet_phi();
  const vector<float> &jet_E();
  const vector<float> &jet_jvt();
  const vector<int> &jet_trueflav();
  const vector<bool> &jet_truthMatched();
  const vector<float> &jet_MV2c10();
  const unsigned int &photon_n();
  const vector<bool> &photon_truthMatched();
  const vector<bool> &photon_trigMatched();
  const vector<float> &photon_pt();
  const vector<float> &photon_eta();
  const vector<float> &photon_phi();
  const vector<float> &photon_E();
  const vector<bool> &photon_isTightID();
  const vector<float> &photon_ptcone30();
  const vector<float> &photon_etcone20();
  const vector<int> &photon_convType();
  const unsigned int &tau_n();
  const vector<float> &tau_pt();
  const vector<float> &tau_eta();
  const vector<float> &tau_phi();
  const vector<float> &tau_E();
  const vector<bool> &tau_isTightID();
  const vector<bool> &tau_truthMatched();
  const vector<bool> &tau_trigMatched();
  const vector<int> &tau_nTracks();
  const vector<float> &tau_BDTid();
  const float &ditau_m();
  const vector<float> &lep_pt_syst();
  const float &met_et_syst();
  const vector<float> &jet_pt_syst();
  const vector<float> &photon_pt_syst();
  const vector<float> &tau_pt_syst();
  const float &XSection();
  const float &SumWeights();
  const unsigned int &largeRjet_n();
  const vector<float> &largeRjet_pt();
  const vector<float> &largeRjet_eta();
  const vector<float> &largeRjet_phi();
  const vector<float> &largeRjet_E();
  const vector<float> &largeRjet_m();
  const vector<float> &largeRjet_truthMatched();
  const vector<float> &largeRjet_D2();
  const vector<float> &largeRjet_tau32();
  const vector<float> &largeRjet_pt_syst();
  const vector<int> &tau_charge();
}
#endif
